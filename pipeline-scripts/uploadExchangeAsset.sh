#!/bin/bash

echo Starting Asset deployment in Anypoint...

API_PATH=$1

source $API_PATH/config.sh

source ./common.sh

VARS=( "ANYPOINT_HOST" "ANYPOINT_USERNAME" "ANYPOINT_PASSWORD" "ANYPOINT_ORG" "MULE_ASSETIDENTIFIER" "MULE_ASSETVERSION" "MULE_FILEPATH" "MULE_APIVERSION" "MULE_CLASSIFIER" )

checkEnvVariables VARS 

#GLOBALS CONSTANTS
TMP_API_FOLDER="/tmp/dc-project"
DC_EXISTING_PROJECT_DIR="/tmp/dc-existing-project"


function copyAPISpecToTmp {
  if [ -d "$TMP_API_FOLDER" ]; then
    rm -rf "$TMP_API_FOLDER"
  fi
  mkdir "$TMP_API_FOLDER"

  #If it's a folder we want to upload, then copy the entire folder
  if [ -d $MULE_FILEPATH ]; then
    cp -rp $MULE_FILEPATH/* $TMP_API_FOLDER 
  elif [ -f $MULE_FILEPATH ]; then #otherwise just copy the single file we want to upload
    cp -rp $MULE_FILEPATH $TMP_API_FOLDER 
  else
    onErrorExit 1 "Invalid value for variable 'MULE_FILEPATH' : '$MULE_FILEPATH'"
  fi
}

# isNewVersion
# This function checks whether the asset version provided in this project has changed compared to the current
# version in Exchange. To do so this function will download the project from DC and check the version number
# currently strored in the exchange.json file which will match with the latest published version in Exchange
# We can assume the project has already been downloaded otherwise this function would never be called
function isNewVersion {
  
  local EXCHANGE_JSON="$DC_EXISTING_PROJECT_DIR/exchange.json"
  if [ -f $EXCHANGE_JSON ]; then  

    local EXCHANGE_VERSION=$(jq ".version" $EXCHANGE_JSON -r)
    if [ -z $EXCHANGE_VERSION ] || [ $EXCHANGE_VERSION != $MULE_ASSETVERSION ]; then
      return 1
    else
      return 0
    fi

  fi

  return 1 #if exchange.json does not exist than it's a new version
}

# checkRAMLHasChanged
# This function detects whether the RAML in the project is the same as the RAML currently in Design Center.
# The check is done by comparing the SHA of the RAML file generated by the offline Sagger conversion and the
# main RAML file assigned to the Design Center project
# TODO: Improve this method so that the check is done against ALL RAML files being pushed rather than a single one.
function checkRAMLHasChanged {
    local RAML_FILE=$(echo "$MULE_ASSETIDENTIFIER.raml")

    if [ -d $DC_EXISTING_PROJECT_DIR ]; then
      rm -rf $DC_EXISTING_PROJECT_DIR
    fi 
    mkdir $DC_EXISTING_PROJECT_DIR
    DEBUG "Download project to diff its content with the content of the swagger files in this repo"
    local DC_EXISTING_PROJECT=$(anypoint-cli designcenter project download $MULE_ASSETIDENTIFIER $DC_EXISTING_PROJECT_DIR)
    DEBUG "Project downloaded"
    DEBUG "Move the exchange.json file since this would fail the comparison.."
    if [ -f $DC_EXISTING_PROJECT_DIR/exchange.json ]; then 
      mv $DC_EXISTING_PROJECT_DIR/exchange.json /tmp/exchange_edc_tmp.json
    fi 

    if [ -f "$TMP_API_FOLDER/exchange.json" ]; then 
      mv $TMP_API_FOLDER/exchange.json /tmp/exchange_dc_tmp.json
    fi 

    if [ -f  $DC_EXISTING_PROJECT_DIR/.gitignore ]; then 
      mv $DC_EXISTING_PROJECT_DIR/.gitignore /tmp/.gitignore_tmp
    fi 

    local DIFF
    diff -brqN $DC_EXISTING_PROJECT_DIR  $TMP_API_FOLDER
    DIFF=$?
    
    if [ -f /tmp/exchange_edc_tmp.json ]; then 
      mv /tmp/exchange_edc_tmp.json $DC_EXISTING_PROJECT_DIR/exchange.json
    fi

    if [ -f /tmp/exchange_dc_tmp.json ]; then 
      mv /tmp/exchange_dc_tmp.json $TMP_API_FOLDER/exchange.json
    fi

    if [ -f /tmp/.gitignore_tmp ]; then 
      mv /tmp/.gitignore_tmp $DC_EXISTING_PROJECT_DIR/.gitignore
    fi 

    if [ $DIFF -eq 1 ]; then 
      DEBUG "Raml has changed.. marking the flow so we push to Exchange"
      local RAML_CHANGED=1
    else
      DEBUG "RAML hasn't changed.. nothing will be pushed to Exchange"
      local RAML_CHANGED=0
    fi

    return $RAML_CHANGED
}

# getOrgId
# This function returns the ID of the org specified by the ANYPOINT_ORG variable. This is needed to set a valid groupId for the
# asset being pushed to Exchange.
function getOrgId {
  local ORGS=$(anypoint-cli account business-group list)
  local ORG=$(echo "$ORGS" | grep $ANYPOINT_ORG | sed 's/\x1b\[[0-9;]*m//g' | sed 's/\u001b\[[0-9;]*m//g' | grep -Eo '[1234567890abcdef]{8}(-[0123456789abcdef]{4}){3}-[0123456789abcdef]{12}')
  echo $ORG
}

# patchConverter
# patch the oas-raml-converter so it can store the converted Swagger into a file instead of just outputting the converted RAML to the console which 
# was causing bash to truncate the resulting RAML.
function patchConverter {
  local CONVERTER="/usr/lib/node_modules/oas-raml-converter/lib/bin/converter.js"
  DEBUG "Converter is $CONVERTER"
  #only patch if it's not alredy patched
  if [ $(grep -c "fs=require('fs')" ${CONVERTER}) -eq 0 ]; then 
    sed -i "s/'use strict';/'use strict';@var fs=require('fs');/g" $CONVERTER 
    tr "@" "\n" < $CONVERTER > temp.js
    mv temp.js $CONVERTER
    chmod 755   $CONVERTER
    chmod +x $CONVERTER
    sed -i "s~return console.log~fs.writeFileSync(\"$TMP_API_FOLDER/$MULE_ASSETIDENTIFIER.raml\", util.stringify(result));return console.log~g" $CONVERTER
  else
    DEBUG "${CONVERTER} has already been patched"
  fi
}


function convertSwagger {
  
  NODE_DISABLE_COLORS=true COLUMNS=10000 oas-raml-converter --from OAS20 --to RAML $MULE_FILEPATH
  DEBUG "RAML file generated"
  echo $(cat $TMP_API_FOLDER/$MULE_ASSETIDENTIFIER.raml)
  
  # Replace "version: XXX" with the version passed to this script which is what Anypoint will do anyway. Only
  # by doing this we will be sure the SHA comparison won't fail
  local MATCH_LINE=$(cat $TMP_API_FOLDER/$MULE_ASSETIDENTIFIER.raml | grep -m 1 -n "version:" | cut -d : -f 1)
  DEBUG "'version' attribute found on line : $MATCH_LINE"
  sed -i -e "${MATCH_LINE}s/.*/version: $MULE_APIVERSION/" $TMP_API_FOLDER/$MULE_ASSETIDENTIFIER.raml 
  DEBUG "File after sed"
  echo "$(cat $TMP_API_FOLDER/$MULE_ASSETIDENTIFIER.raml)"
  
}

# publishAssetToExchange
# This function publish the asset to Exchange. 
# In particular, the publish will only happen if the RAML file being deployed is changed compared to what it's alredy stored in Design Center (check on RAML_CHANGED input parameter)
# If the RAML hasn't changed then nothing will be published (there's no need to create a new asset if the API hasn't changed at all)
function publishAssetToExchange {
  local RAML_FILE=$1
  local RAML_CHANGED=$2

  local ORG=""
  ORG=$(getOrgId)
  INFO "Publishing project to exchange..."
  INFO "Asset coordinates: $ORG/$MULE_ASSETIDENTIFIER/$MULE_ASSETVERSION (api version '$MULE_APIVERSION')"
  local EXCHANGE_PUBLISH_RESPONSE
  local EXCHANGE_PUBLISH_STATUS
  #Publish the project regardless of RAML_CHANGED since we cannot assume it's already published to Exchange. If it fails we'll handle the case later down the code
  EXCHANGE_PUBLISH_RESPONSE=$(anypoint-cli designcenter project publish --name $MULE_ASSETIDENTIFIER --main $RAML_FILE --apiVersion $MULE_APIVERSION --assetId $MULE_ASSETIDENTIFIER --version $MULE_ASSETVERSION --groupId $ORG $MULE_ASSETIDENTIFIER)
  EXCHANGE_PUBLISH_STATUS=$?
  local ASSET_ALREADY_EXISTS=$(echo $EXCHANGE_PUBLISH_RESPONSE | grep -c "Error: Asset already exists. Choose another asset name or version.")
  DEBUG "Asset already exists? $ASSET_ALREADY_EXISTS"
  DEBUG "EXCHANGE_PUBLISH_RESPONSE : $EXCHANGE_PUBLISH_RESPONSE"
  
  #If exchange asset already exists and the RAML hasn't changed then we're fine.. we can carry on, otherwise it's an error
  if [ $EXCHANGE_PUBLISH_STATUS -gt 0 ] && [ $ASSET_ALREADY_EXISTS -gt 0 ]; then
    if [ $RAML_CHANGED -gt 0 ]; then 
      onErrorExit 1 "RAML appears to have changed. Please increase the asset version number."
    else 
      INFO "RAML hasn't changed therefore nothing will be published to Exchange"
    fi
  elif [ $EXCHANGE_PUBLISH_STATUS -gt 0 ]; then
    onErrorExit $EXCHANGE_PUBLISH_STATUS "Error ($EXCHANGE_PUBLISH_STATUS) while publishing asset $MULE_ASSETIDENTIFIER/$MULE_ASSETVERSION to Exchange. CLI error was: $EXCHANGE_PUBLISH_RESPONSE "
  else 
    INFO "Asset successfully publshed to Exchange: $EXCHANGE_PUBLISH_RESPONSE"
  fi

}

# createDesignCenterProject
# This function creates a new Design Center project if needed (i.e. if there's no a project with the given name already)
# The name of the project will match the name of the asset ID
# RETURN: 
### 0 - If the project already existed
### 1 - If the project has been created
function createDesignCenterProject {
  local STATUS
  local DC_PROJECT_RESPONSE
  DC_PROJECT_RESPONSE=$(anypoint-cli designcenter project create --type raml $MULE_ASSETIDENTIFIER)
  STATUS=$?
    
  DEBUG "Design Center project creation [status: $STATUS, response: $DC_PROJECT_RESPONSE]"
  #The project might already exist. If so, check that the current RAML's SHA exquals the newly generated RAML's
  if [ $STATUS -gt 0 ] && [ DC_PROJECT_RESPONSE="Project with name, type and organization already exists" ]; then 
    INFO "Design Center project $MULE_ASSETIDENTIFIER already exists... Checking whether it is a new version of the swagger we want to publish"
    return 0
  elif [ $STATUS -gt 0 ]; then
    onErrorExit $STATUS "Error ($STATUS) while creating project $MULE_ASSETIDENTIFIER: $DC_PROJECT_RESPONSE"
  else 
    return 1
  fi

}

# uploadProjectToDC
# This function uploads the RAML spec into a Design Center project
# It checks that the RAML file we're trying to upload to Design Center is different from what's already stored
# If the file is different the the project will be pushed to Design Center otherwise it'll be deemed the same and no
# needing of being pushed again
# Cases:
# - New project.. upload
# - Files have not changed or have changed and a new version asset version is being specified in MULE_ASSETVERSION - upload
# - RAML has changed but no new version has been specified, fail
  
function uploadProjectToDC {
  #Now upload the RAML file into the Design Center project
  INFO "Uploading RAML file to Design Center project..."
  local DC_PROJECT_RESPONSE
  INFO "Uploading API project '$TMP_API_FOLDER'"
  DC_PROJECT_RESPONSE=$(anypoint-cli designcenter project upload $MULE_ASSETIDENTIFIER $TMP_API_FOLDER)
  onErrorExit $? "Error while creating Design Center project '$MULE_ASSETIDENTIFIER'. Error: $DC_PROJECT_RESPONSE"
  INFO "RAML uploaded to Design Center project $MULE_ASSETIDENTIFIER"
}

# doOfflineConversionAndPushToExchange 
# This function performes the offline Swagger to RAML conversion, push the RAML to Design Center (only if it's 
# detected the generated RAML differs from the one already existing in Design Center) and pushes a new asset to Exchange (if necessary)
# If the project's asset ID has not been incremented and this scripts detects that a new RAML is being pushed, the script fails.
# However, if the project asset ID hasn't been incremented and the script detects that the RAML file being pushed is exactly the same as
# the one currently in Design Center, then nothing will happen and this script won't fail and essentially won't do anything.
function doOfflineConversionAndPushToExchange {
  DEBUG "Use offline oas-raml converter"
  local SWAGGER_FILE=$(basename $MULE_FILEPATH) #assumption is that MULE_FILEPATH points to the swagger file hence it's not a folder
  local RAML_FILE=$(echo "$MULE_ASSETIDENTIFIER.raml")

  DEBUG "Converting $SWAGGER_FILE to RAML..."
  
  # Before running the converter, patch it so it saves the raml file to a file since using shell piping seems to truncate the output
  patchConverter
  convertSwagger 
  #at this point it should be safe to remove the swagger file so it doesn't get uploaded into DC
  rm $TMP_API_FOLDER/$SWAGGER_FILE
  DEBUG "$RAML_FILE created"

  uploadAndPublishProject "$RAML_FILE"

}

function uploadAndPublishProject {
  local MAIN_RAML=$1
  local RAML_CHANGED=-1
  local IS_NEW_VERSION=0
  local DC_PROJECT_STATE

  if [ ! -f $TMP_API_FOLDER/$MAIN_RAML ]; then
    onErrorExit 1 "Your project must contain a raml file named '$MULE_ASSETIDENTIFIER.raml' that will be the main API RAML file."
  fi 

  #Create a Design center project to host the RAML file
  INFO "Creating Design Center project $MULE_ASSETIDENTIFIER"
  
  createDesignCenterProject
  DC_PROJECT_STATE=$?

  #if the project already existed, check whether the RAML has changed or not
  if [ $DC_PROJECT_STATE == 0 ]; then
      checkRAMLHasChanged
      RAML_CHANGED=$?
      DEBUG "Is RAML changed? $RAML_CHANGED"
  fi 

  #If the RAML file has changed, check a new asset version has been specified in the project
  if [ $RAML_CHANGED == 1 ]; then
    isNewVersion
    IS_NEW_VERSION=$?
    DEBUG "Has a new Asset Version been specified? $IS_NEW_VERSION"
  fi 

  #IF and only IF there was a change to the RAML file, perform the push to DC.
  if [ $RAML_CHANGED == 1 ] && [ $IS_NEW_VERSION == 0 ]; then
  
    onErrorExit 1 "API Spec changed but the asset version has not been incremented ($MULE_ASSETVERSION)"
  
  # If the RAML has changed or it's a new DC project, upload files to DC
  elif [ $RAML_CHANGED == 1 ] || [ $DC_PROJECT_STATE == 1 ]; then 

    uploadProjectToDC $RAML_CHANGED

  else

    WARN "There is already an asset in Design Center with the same content of the RAML being pushed therefore nothing has been pushed to Design Center"
  
  fi

  publishAssetToExchange  $MAIN_RAML $RAML_CHANGED
}


# MAIN

copyAPISpecToTmp

if [ ! -z $(echo $MULE_CLASSIFIER | grep -i "oas")  ]; then 
  if [ -n $ANYPOINT_OFFLINE_CONVERTER ]; then

    doOfflineConversionAndPushToExchange

  else

    RESPONSE=$(anypoint-cli exchange asset upload $MULE_ASSETIDENTIFIER/$MULE_ASSETVERSION $MULE_FILEPATH --apiVersion $MULE_APIVERSION --name $MULE_ASSETIDENTIFIER --classifier $MULE_CLASSIFIER)
    onErrorExit $? "Error While uploading Exchange Asset $RESPONSE"
  
  fi

elif [ ! -z $(echo $MULE_CLASSIFIER | grep -i "raml") ]; then 
   uploadAndPublishProject "$(echo "$MULE_ASSETIDENTIFIER.raml")"
else 
  onErrorExit 1 "Invalid or no value specified for the environment variable MULE_CLASSIFIER: '$MULE_CLASSIFIER' . Valid values are 'oas' or 'raml'"
fi